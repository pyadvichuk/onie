Support "eeprom" on disk for platforms without a real eeprom.

diff --git a/miscutils/Config.src b/miscutils/Config.src
index cdae45b750b1..290046a217c2 100644
--- a/miscutils/Config.src
+++ b/miscutils/Config.src
@@ -568,6 +568,9 @@ config SYS_EEPROM_DEVICE_I2C
 config SYS_EEPROM_DEVICE_MTD
 	bool "MTD"
 
+config SYS_EEPROM_DEVICE_DISK
+	bool "disk (not recommended)"
+
 endchoice
 
 config SYS_EEPROM_I2C_DEVICE
@@ -624,8 +627,16 @@ config SYS_EEPROM_MTD_DEVICE
 	help
 	  MTD device name of the eeprom. e.g., /dev/mtd-hw-info.
 
+config SYS_EEPROM_DISK_DEVICE
+	string "disk device"
+	default "/dev/sda"
+	depends on SYS_EEPROM_DEVICE_DISK
+	help
+	  device name of the on-disk "eeprom". e.g., /dev/sda.
+
 config SYS_EEPROM_OFFSET
 	int "offset"
+	range 0 0 if SYS_EEPROM_DEVICE_DISK
 	range 0 65536
 	default 0
 	depends on SYS_EEPROM
@@ -634,7 +645,9 @@ config SYS_EEPROM_OFFSET
 
 config SYS_EEPROM_SIZE
 	int "usable eeprom size in byte"
+	range 2048 2048 if SYS_EEPROM_DEVICE_DISK
 	range 0 2048
+	default 2048 if SYS_EEPROM_DEVICE_DISK
 	default 0
 	depends on SYS_EEPROM
 	help
@@ -642,6 +655,7 @@ config SYS_EEPROM_SIZE
 
 config SYS_EEPROM_MAX_SIZE
 	int "total size in byte"
+	range 2048 2048 if SYS_EEPROM_DEVICE_DISK
 	range 256 65536
 	default 2048
 	depends on SYS_EEPROM
diff --git a/miscutils/Kbuild.src b/miscutils/Kbuild.src
index a78273de6ca7..8ff4e9853415 100644
--- a/miscutils/Kbuild.src
+++ b/miscutils/Kbuild.src
@@ -54,3 +54,4 @@ lib-$(CONFIG_WATCHDOG)    += watchdog.o
 lib-$(CONFIG_SYS_EEPROM)  += sys_eeprom.o onie_tlvinfo.o
 lib-$(CONFIG_SYS_EEPROM_DEVICE_I2C) += sys_eeprom_i2c.o 24cXX.o
 lib-$(CONFIG_SYS_EEPROM_DEVICE_MTD) += sys_eeprom_mtd.o
+lib-$(CONFIG_SYS_EEPROM_DEVICE_DISK) += sys_eeprom_disk.o
diff --git a/miscutils/sys_eeprom_disk.c b/miscutils/sys_eeprom_disk.c
new file mode 100644
index 000000000000..440b490b4824
--- /dev/null
+++ b/miscutils/sys_eeprom_disk.c
@@ -0,0 +1,112 @@
+#include "libbb.h"
+#include "onie_tlvinfo.h"
+#include "sys_eeprom.h"
+
+/*
+ * Storing the "eeprom" on "disk".
+ *
+ * This is not recommended practice.
+ * In fact, this should be a last resort, for machines that
+ * have no usable eeprom of any sort (ha! pun).
+ *
+ * The data is kept in the sectors just before the first GPT
+ * partition.  It's part of the GPT area but currently unused.
+ * The sector address is hard coded and must match that in
+ * onie/installer/x86_64/install-arch (currently 2048).
+ *
+ * Also, the device name is configurable but fixed at build time,
+ * and must match the actual boot device, which may have been
+ * dynamically discovered at onie install time.
+ */
+
+#if CONFIG_SYS_EEPROM_OFFSET != 0
+#error CONFIG_SYS_EEPROM_OFFSET must be 0 for disk eeprom type
+#endif
+
+#if CONFIG_SYS_EEPROM_SIZE != 2048
+#error CONFIG_SYS_EEPROM_SIZE must be 2048 for disk eeprom type
+#endif
+
+#if CONFIG_SYS_EEPROM_MAX_SIZE != 2048
+#error CONFIG_SYS_EEPROM_MAX_SIZE must be 2048 for disk eeprom type
+#endif
+
+#define START_SECTOR (2048 - CONFIG_SYS_EEPROM_MAX_SIZE / 512)
+
+static int open_dev(int offset)
+{
+    int fd;
+    off64_t offset64;
+
+    fd = open(CONFIG_SYS_EEPROM_DISK_DEVICE, O_RDWR);
+    if (fd < 0) {
+        printf("ERROR: open(%s): %s\n",
+               CONFIG_SYS_EEPROM_DISK_DEVICE, strerror(errno));
+        return -1;
+    }
+    offset64 = (off64_t) 512 * START_SECTOR +
+	       CONFIG_SYS_EEPROM_OFFSET + offset;
+    if (lseek64(fd, offset64, SEEK_SET) < 0) {
+        printf("ERROR: lseek64(%s): %s\n",
+               CONFIG_SYS_EEPROM_DISK_DEVICE, strerror(errno));
+        close(fd);
+        return -1;
+    }
+    return fd;
+}
+
+int read_sys_eeprom(void *eeprom_data, int offset, int len)
+{
+    int fd;
+    ssize_t n;
+    int ret = -1;
+
+    fd = open_dev(offset);
+    if (fd < 0)
+        goto out;
+    n = read(fd, eeprom_data, len);
+    if (n < 0) {
+        printf("ERROR: read(%s): %s\n",
+               CONFIG_SYS_EEPROM_DISK_DEVICE, strerror(errno));
+        goto out;
+    }
+    if (n != len) {
+	printf("ERROR: read(%s): read %zd byte(s) instead of %d bytes\n",
+               CONFIG_SYS_EEPROM_DISK_DEVICE, n, len);
+        goto out;
+    }
+    ret = 0;
+
+out:
+    if (fd >= 0)
+        close(fd);
+    return ret;
+}
+
+int write_sys_eeprom(void *eeprom_data, int len)
+{
+    int fd;
+    ssize_t n;
+    int ret = -1;
+
+    fd = open_dev(0);
+    if (fd < 0)
+        goto out;
+    n = write(fd, eeprom_data, len);
+    if (n < 0) {
+        printf("ERROR: write(%s): %s\n",
+               CONFIG_SYS_EEPROM_DISK_DEVICE, strerror(errno));
+        goto out;
+    }
+    if (n != len) {
+	printf("ERROR: write(%s): wrote %zd byte(s) instead of %d bytes\n",
+               CONFIG_SYS_EEPROM_DISK_DEVICE, n, len);
+        goto out;
+    }
+    ret = 0;
+
+out:
+    if (fd >= 0)
+        close(fd);
+    return ret;
+}
