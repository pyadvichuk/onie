From 076873aef3133ce063dc7d00f98197a46bba176a Mon Sep 17 00:00:00 2001
From: "Bernie.Chien" <bernie.chien@wnc.com.tw>
Date: Tue, 19 Sep 2017 17:39:08 +0800
Subject: [PATCH] onie syseeprom mux rw wnc

---
 miscutils/sys_eeprom_i2c.c | 203 ++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 174 insertions(+), 29 deletions(-)
 mode change 100644 => 100755 miscutils/sys_eeprom_i2c.c

diff --git a/miscutils/sys_eeprom_i2c.c b/miscutils/sys_eeprom_i2c.c
old mode 100644
new mode 100755
index ed3235b..4b9ff48
--- a/miscutils/sys_eeprom_i2c.c
+++ b/miscutils/sys_eeprom_i2c.c
@@ -2,38 +2,116 @@
 #include "onie_tlvinfo.h"
 #include "sys_eeprom.h"
 #include "24cXX.h"
+#include <linux/i2c-dev.h>
 
 #if SYS_EEPROM_I2C_MEM_ADDR_BITS == 8
     #define EEPROM_TYPE EEPROM_TYPE_8BIT_ADDR
 #elif SYS_EEPROM_I2C_MEM_ADDR_BITS == 16
     #define EEPROM_TYPE EEPROM_TYPE_16BIT_ADDR
 #else
-    #define EEPROM_TYPE EEPROM_TYPE_UNKNOWN
+    #define EEPROM_TYPE EEPROM_TYPE_8BIT_ADDR
 #endif
 
+
+#define EEPROM_MUX_ADDR 0x70 //Mux0
+#define EEPROM_MUX_CH_DATA 0x20  //Channel 5
+
 /*
  * read_sys_eeprom - read the hwinfo from i2c EEPROM
  */
 int read_sys_eeprom(void *eeprom_data, int offset, int len)
 {
-    int ret = 0;
+    
+    unsigned char start_addr[1] =  {0x00};
+    int status;
+    unsigned char buf[16] = {0};
+    int i;
+
     struct eeprom e;
-    int i = 0;
     u_int8_t *c;
     int addr = SYS_EEPROM_OFFSET + offset;
-
     c = eeprom_data;
-    if (eeprom_open(SYS_EEPROM_I2C_DEVICE, SYS_EEPROM_I2C_ADDR,
-		    EEPROM_TYPE, &e)) {
-	printf("ERROR: Cannot open I2C device\n");
-	return -1;
+    int fd = open(SYS_EEPROM_I2C_DEVICE, O_RDWR);
+    if (fd < 0) {
+        printf("ERROR: open(%d) failed\n", fd);
+        return -1;
+    }
+
+    status = ioctl(fd, I2C_SLAVE, EEPROM_MUX_ADDR); //Mux 0 = 0x70
+    if (status < 0)
+    {
+        printf("ERROR: Turn on mux0 : ioctl(fd, I2C_SLAVE, 0x70) failed\n");
+        close(fd);
+        return -1;
+    }
+
+	e.fd = fd;
+	e.type = EEPROM_TYPE;
+	
+	status = eeprom_write_byte(&e,0x00,EEPROM_MUX_CH_DATA); //Channel 5 = 0x20
+	if (status < 0)
+    {
+        printf("ERROR: Turn on channel 5 : ioctl(fd, I2C_SLAVE, 0x20) failed\n");
+        close(fd);
+        return -1;
     }
-    for (i = 0; i < len; i++) {
-	*c = eeprom_read_byte(&e, addr);
-	c++; addr++;
+
+    // SETTING EEPROM ADDR
+    status = ioctl(fd, I2C_SLAVE, SYS_EEPROM_I2C_ADDR);
+    if (status < 0)
+    {
+        printf("ERROR: ioctl(fd, I2C_SLAVE, 0x%02X) failed\n", SYS_EEPROM_I2C_ADDR);
+        goto err;
+    }
+
+    for(i=0; i<len; i+=7)
+    {
+        int read_num = (len-i)>6?7:(len-i);
+        start_addr[0] = i+addr;
+        //start_addr[1] = i+addr;
+
+        if(write(fd,start_addr,1)!=1){
+            printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
+            goto err;
+        }
+        if (read(fd,buf,read_num) != read_num) {
+            printf("ERROR: read() failed\n");
+            goto err;
+        }
+        memcpy(c+i,buf,read_num);
+    }
+
+    /*
+    // for get and dump values if needed.
+    unsigned char tmp[18] = {0};
+    unsigned char buf2[1] = {0};
+    for(i = 0; i<11; i++)
+    {
+        tmp[0] = i;
+        //tmp[1] = i & 0x00ff;
+
+        if(write(fd,tmp,1)!=1){
+        printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
+        }
+
+        if (read(fd,buf2,1) != 1) {
+        printf("ERROR: read() failed\n");
+        }
+        printf("@@%d=0x%02X(%d) \r\n", i, buf2[0],buf2[0]);
     }
-    eeprom_close(&e);
-    return ret;
+    */
+
+	ioctl(fd, I2C_SLAVE, EEPROM_MUX_ADDR);
+	eeprom_write_byte(&e,0x00,0x00); //Set channel as default
+    close(fd);
+    return 0;
+
+err:
+	ioctl(fd, I2C_SLAVE, EEPROM_MUX_ADDR);
+	eeprom_write_byte(&e,0x00,0x00); //Set channel as default
+	close(fd);
+
+	return -1;
 }
 
 /*
@@ -41,23 +119,90 @@ int read_sys_eeprom(void *eeprom_data, int offset, int len)
  */
 int write_sys_eeprom(void *eeprom_data, int len)
 {
-    int ret = 0;
+    unsigned char tmp[18] = {0};
+    unsigned int i;
+
     struct eeprom e;
-    int i = 0;
     u_int8_t *c;
-    u_int16_t  addr = SYS_EEPROM_OFFSET;
-
     c = eeprom_data;
-    for (i = 0; i < len; i++) {
-	if (eeprom_open(SYS_EEPROM_I2C_DEVICE, SYS_EEPROM_I2C_ADDR,
-			EEPROM_TYPE, &e)) {
-	    printf("ERROR: Cannot open I2C device\n");
-	    return -1;
-	}
-	eeprom_write_byte(&e, addr, *c);
-	eeprom_close(&e);
-	c++; addr++;
-    }
-
-    return ret;
+
+    int fd = open(SYS_EEPROM_I2C_DEVICE, O_RDWR);
+    if (fd < 0) {
+        printf("ERROR: open(%d) failed\n", fd);
+        return -1;
+    }
+
+    int status;
+
+	status = ioctl(fd, I2C_SLAVE, EEPROM_MUX_ADDR); //Mux 0 = 0x70
+    if (status < 0)
+    {
+        printf("ERROR: Turn on mux0 : ioctl(fd, I2C_SLAVE, 0x70) failed\n");
+        close(fd);
+        return -1;
+    }
+
+	e.fd = fd;
+	e.type = EEPROM_TYPE;
+	
+	status = eeprom_write_byte(&e,0x00,EEPROM_MUX_CH_DATA); //Channel 5 = 0x20
+	if (status < 0)
+    {
+        printf("ERROR: Turn on channel 5 : ioctl(fd, I2C_SLAVE, 0x20) failed\n");
+        close(fd);
+        return -1;
+    }
+	
+    // SETTING EEPROM ADDR
+    status = ioctl(fd, I2C_SLAVE, SYS_EEPROM_I2C_ADDR);
+    if (status < 0)
+    {
+        printf("ERROR: ioctl(fd, I2C_SLAVE, 0x%02X) failed\n", SYS_EEPROM_I2C_ADDR);
+        goto err;
+    }	
+	
+    //write 2 bytes per writting, one for address, one for data.
+    for(i = 0; i < len; i+=1)
+    {
+        //int write_num = (len-i)>6?7:(len-i);
+        int write_num = 1;
+        tmp[0] = i;
+        //tmp[1] = i;
+        memcpy(tmp+1, c+i, write_num);
+		
+        if(write(fd,tmp,write_num+1) != write_num+1){
+            printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
+            goto err;
+        }
+    }
+
+    /*
+    // for get and dump values if needed.
+    unsigned char buf[1] = {0};
+    for(i = 0; i<11; i++)
+    {
+        tmp[0] = i;
+        //tmp[1] = i & 0x00ff;
+
+        if(write(fd,tmp,1)!=1){
+        printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
+        }
+
+        if (read(fd,buf,1) != 1) {
+        printf("ERROR: read() failed\n");
+        }
+        printf("++%d=0x%02X(%d) \r\n", i, buf[0],buf[0]);
+    }
+    */
+
+	ioctl(fd, I2C_SLAVE, EEPROM_MUX_ADDR);
+	eeprom_write_byte(&e,0x00,0x00); //Set channel as default
+    close(fd);
+    return 0;
+
+err:
+	ioctl(fd, I2C_SLAVE, EEPROM_MUX_ADDR);
+	eeprom_write_byte(&e,0x00,0x00); //Set channel as default
+	close(fd);
+	return -1;
 }
-- 
2.7.4

