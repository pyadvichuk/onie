diff --git a/include/applets.src.h b/include/applets.src.h
index 71b8cbd..122ee4f 100644
--- a/include/applets.src.h
+++ b/include/applets.src.h
@@ -345,6 +345,7 @@ IF_WHOAMI(APPLET_NOFORK(whoami, whoami, BB_DIR_USR_BIN, BB_SUID_DROP, whoami))
 IF_YES(APPLET_NOFORK(yes, yes, BB_DIR_USR_BIN, BB_SUID_DROP, yes))
 IF_ZCIP(APPLET(zcip, BB_DIR_SBIN, BB_SUID_DROP))
 IF_SYS_EEPROM(APPLET_ODDNAME(onie-syseeprom, onie_syseeprom, BB_DIR_USR_BIN, BB_SUID_DROP, onie_syseeprom))
+APPLET(mb_detect, BB_DIR_USR_BIN, BB_SUID_DROP)
 
 #if !defined(PROTOTYPES) && !defined(NAME_MAIN) && !defined(MAKE_USAGE) \
 	&& !defined(MAKE_LINKS) && !defined(MAKE_SUID)
diff --git a/include/i2c-dev.h b/include/i2c-dev.h
index 23f7c2c..75bb6c1 100644
--- a/include/i2c-dev.h
+++ b/include/i2c-dev.h
@@ -326,5 +326,76 @@ static inline __s32 i2c_smbus_block_process_call(int file, __u8 command,
 	}
 }
 
+/*
+ * i2c_smbus_cpld_reg_read - read register of CPLD
+ */
+static inline __s32 i2c_smbus_cpld_reg_read(__s32 bus, __u8 dev, uint reg, __u8 *value)
+{
+	__s32 fd = 0;
+	char filename[20] = "";
+	union i2c_smbus_data data;
+
+	sprintf(filename, "/dev/i2c-%d", bus);
+	fd = open(filename, O_RDWR);
+	if (fd < 0) {
+		printf("Error: Could not open file %s\n", filename);
+		return -1;
+	}
+
+	if (ioctl(fd, I2C_SLAVE, dev) < 0) {
+		close(fd);
+		return -1;
+	}
+
+	if (i2c_smbus_access(fd, I2C_SMBUS_READ, reg,
+	                     I2C_SMBUS_BYTE_DATA, &data)) {
+		close(fd);
+		return -1;
+	}
+
+	*value = (0xFF & data.byte);
+
+	close(fd);
+	return 0;
+}
+
+/*
+ * i2c_smbus_switch_select - select channel for i2c switch
+ * 0xff will release i2c switch
+ */
+static inline __s32 i2c_smbus_switch_select(__s32 bus, __u8 dev, __u8 channel)
+{
+	__s32 fd = 0;
+	char filename[20] = "";
+	union i2c_smbus_data data;
+
+	if (channel == 0xff)
+		data.byte = 0;
+	else if ( (channel >= 0) && (channel <= 7) )
+		data.byte = (0x01 << channel);
+	else
+		return -1;
+
+	sprintf(filename, "/dev/i2c-%d", bus);
+	fd = open(filename, O_RDWR);
+	if (fd < 0) {
+		printf("Error: Could not open file %s\n", filename);
+		return -1;
+	}
+
+	if (ioctl(fd, I2C_SLAVE, dev) < 0) {
+		close(fd);
+		return -1;
+	}
+
+	if (i2c_smbus_access(fd, I2C_SMBUS_WRITE, 0,
+	                     I2C_SMBUS_BYTE_DATA, &data) != 0) {
+		close(fd);
+		return -1;
+	}
+
+	close(fd);
+	return 0;
+}
 
 #endif /* _LINUX_I2C_DEV_H */
diff --git a/miscutils/Kbuild.src b/miscutils/Kbuild.src
index 72ddcd1..7f9c2b4 100644
--- a/miscutils/Kbuild.src
+++ b/miscutils/Kbuild.src
@@ -56,3 +56,4 @@ lib-$(CONFIG_SYS_EEPROM_DEVICE_I2C) += sys_eeprom_i2c.o 24cXX.o
 lib-$(CONFIG_SYS_EEPROM_DEVICE_MTD) += sys_eeprom_mtd.o
 lib-$(CONFIG_SYS_EEPROM_DEVICE_DISK) += sys_eeprom_disk.o
 lib-$(CONFIG_SYS_EEPROM_SYSFS_FILE) += sys_eeprom_sysfs_file.o
+lib-y                     += mb_detect.o
diff --git a/miscutils/sys_eeprom_i2c.c b/miscutils/sys_eeprom_i2c.c
index ed3235b..6d88a58 100644
--- a/miscutils/sys_eeprom_i2c.c
+++ b/miscutils/sys_eeprom_i2c.c
@@ -2,6 +2,8 @@
 #include "onie_tlvinfo.h"
 #include "sys_eeprom.h"
 #include "24cXX.h"
+#include <i2c-dev.h>
+#include <mb_detect.h>
 
 #if SYS_EEPROM_I2C_MEM_ADDR_BITS == 8
     #define EEPROM_TYPE EEPROM_TYPE_8BIT_ADDR
@@ -21,9 +23,19 @@ int read_sys_eeprom(void *eeprom_data, int offset, int len)
     int i = 0;
     u_int8_t *c;
     int addr = SYS_EEPROM_OFFSET + offset;
+    SysEEPROMPath ep;
+
+    sys_eeprom_path_get(&ep);
+    if (ep.i2c_mux != 0x00)
+    {
+        if(i2c_smbus_switch_select(MB_DETECT_I2C_BUS, ep.i2c_mux, ep.i2c_channel) < 0) {
+            printf("ERROR: Cannot select I2C mux for eeprom\n");
+            return -1;
+        }
+    }
 
     c = eeprom_data;
-    if (eeprom_open(SYS_EEPROM_I2C_DEVICE, SYS_EEPROM_I2C_ADDR,
+    if (eeprom_open((char *)ep.i2c_bus, ep.i2c_dev,
 		    EEPROM_TYPE, &e)) {
 	printf("ERROR: Cannot open I2C device\n");
 	return -1;
@@ -33,6 +45,10 @@ int read_sys_eeprom(void *eeprom_data, int offset, int len)
 	c++; addr++;
     }
     eeprom_close(&e);
+
+    if (ep.i2c_mux != 0x00)
+        i2c_smbus_switch_select(MB_DETECT_I2C_BUS, ep.i2c_mux, 0xff);
+
     return ret;
 }
 
@@ -46,18 +62,31 @@ int write_sys_eeprom(void *eeprom_data, int len)
     int i = 0;
     u_int8_t *c;
     u_int16_t  addr = SYS_EEPROM_OFFSET;
+    SysEEPROMPath ep;
+
+    sys_eeprom_path_get(&ep);
+    if (ep.i2c_mux != 0x00)
+    {
+        if(i2c_smbus_switch_select(MB_DETECT_I2C_BUS, ep.i2c_mux, ep.i2c_channel) < 0) {
+            printf("ERROR: Cannot select I2C mux for eeprom\n");
+            return -1;
+        }
+    }
+
+    if (eeprom_open((char *)ep.i2c_bus, ep.i2c_dev, EEPROM_TYPE, &e)) {
+        printf("ERROR: Cannot open I2C device\n");
+        return -1;
+    }
 
     c = eeprom_data;
     for (i = 0; i < len; i++) {
-	if (eeprom_open(SYS_EEPROM_I2C_DEVICE, SYS_EEPROM_I2C_ADDR,
-			EEPROM_TYPE, &e)) {
-	    printf("ERROR: Cannot open I2C device\n");
-	    return -1;
-	}
 	eeprom_write_byte(&e, addr, *c);
-	eeprom_close(&e);
 	c++; addr++;
     }
+    eeprom_close(&e);
+
+    if (ep.i2c_mux != 0x00)
+        i2c_smbus_switch_select(MB_DETECT_I2C_BUS, ep.i2c_mux, 0xff);
 
     return ret;
 }
diff --git a/miscutils/mb_detect.c b/miscutils/mb_detect.c
new file mode 100644
index 0000000..0a5978a
--- /dev/null
+++ b/miscutils/mb_detect.c
@@ -0,0 +1,322 @@
+#include "libbb.h"
+#include <i2c-dev.h>
+#include <getopt.h>
+#include <mb_detect.h>
+
+extern void mb_detect_usage(void);
+
+SysBoardInfo sysBoardInfo[MAX_NUM_MB] = {
+    { HURACAN_WITH_BMC, "aurora_720_rangeley_with_bmc", "AURORA-720-BMC\0", "Aurora 720-BMC\0"},
+    { HURACAN_WITHOUT_BMC, "aurora_720_rangeley", "AURORA-720\0", "Aurora 720\0"},
+    { CABRERAIII_WITH_BMC, "aurora_520_rangeley_with_bmc", "AURORA-520-BMC\0", "Aurora 520-BMC\0"},
+    { CABRERAIII_WITHOUT_BMC, "aurora_520_rangeley_with", "AURORA-520\0", "Aurora 520\0"},
+    { SESTO_WITH_BMC, "aurora_620_rangeley_with_bmc", "AURORA-620-BMC\0", "Aurora 620-BMC\0"},
+    { SESTO_WITHOUT_BMC, "aurora_620_rangeley", "AURORA-620\0", "Aurora 620\0"},
+    { NCIIX_WITH_BMC, "aurora_420_rangeley_with_bmc", "AURORA-420-BMC\0", "Aurora 420-BMC\0"},
+    { NCIIX_WITHOUT_BMC, "aurora_420_rangeley", "AURORA-420\0", "Aurora 420\0"},
+    { ASTERION_WITH_BMC, "aurora_630_rangeley_with_bmc", "Aurora-630-BMC\0", "Aurora 630-BMC\0"},
+    { ASTERION_WITHOUT_BMC, "aurora_630_rangeley", "AURORA-630\0", "Aurora 630\0"},
+    { HURACAN_A_WITH_BMC, "aurora_720_a_rangeley_with_bmc", "AURORA-720-A-BMC\0", "Aurora 720-A-BMC\0"},
+    { HURACAN_A_WITHOUT_BMC, "aurora_720_a_rangeley", "AURORA-720-A\0", "Aurora 720-A\0"},
+    { EVORA_WITHOUT_BMC, "aurora_420_p_rangeley", "AURORA-420-P\0", "Aurora 420-P\0"},
+    { EUROPA_WITHOUT_BMC, "aurora_620_p_rangeley", "AURORA-620-P\0", "Aurora 620-P\0"},
+};
+
+SysEEPROMPath sysEEPROMPath[] = {
+    { 0x70, 7, 0x54, "/dev/i2c-1"}, /* Aurora 720, 720-A */
+    { 0x72, 7, 0x54, "/dev/i2c-1"}, /* Aurora 620, 420-P, 620-P */
+    { 0x00, 0, 0x56, "/dev/i2c-0"}, /* Aurora 420 */
+    { 0x70, 2, 0x56, "/dev/i2c-1"}, /* Aurora 420 - PVT */
+    { 0x72, 5, 0x54, "/dev/i2c-1"}, /* Aurora 630 */
+};
+
+/*
+ *  This macro defines the mb_detect command line command.
+ */
+//usage:#define mb_detect_trivial_usage
+//usage:       "[-ifpdmbsce]"
+//usage:#define mb_detect_full_usage "\n\n"
+//usage:     "Display Netberg Aurora Switch Motherboard detect result.\n"
+//usage:     "\n  -i  Output motherboard id."
+//usage:     "\n  -f  Output motherboard platform."
+//usage:     "\n  -p  Output motherboard project."
+//usage:     "\n  -d  Output motherboard product."
+//usage:     "\n  -m  Output motherboard model."
+//usage:     "\n  -b  Output eeprom i2c bus."
+//usage:     "\n  -s  Output eeprom channel-selector address."
+//usage:     "\n  -c  Output eeprom channel-selector channel."
+//usage:     "\n  -e  Output eeprom slave address."
+
+void mb_detect_usage(void)
+{
+    static const char *usage =
+        "Display Netberg Aurora Switch Motherboard detect result.\n"
+        "Usage: mb_detect [-h] [-i] [-f] [-p] [-d] [-m] [-b] [-s] [-c] [-e]\n"
+        "   -h --help\n"
+        "      Display usage\n"
+        "   -i --id\n"
+        "      Output motherboard id.\n"
+        "   -f --platform\n"
+        "      Output motherboard platform name.\n"
+        "   -p --project\n"
+        "      Output motherboard project name.\n"
+        "   -d --product\n"
+        "      Output motherboard product name.\n"
+        "   -m --model\n"
+        "      Output motherboard model name.\n"
+        "   -b --i2c-bus\n"
+        "      Output eeprom i2c bus num.\n"
+        "   -s --chan-select\n"
+        "      Output eeprom i2c channel-selector address.\n"
+        "   -c --chan\n"
+        "      Output eeprom i2c channel-selector channel.\n"
+        "   -e --eeprom-slave\n"
+        "      Output eeprom i2c slave address.\n";
+
+    fprintf(stderr, "%s", usage);
+    exit(1);
+}
+
+/*
+ *  do_mb_detect
+ *  This function implements the mb_detect command.
+ */
+int mb_detect_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
+int mb_detect_main(int argc, char **argv)
+{
+    int count = 0;
+    int c, option_index;
+    __u8 id;
+    SysBoardInfo bdinfo;
+    SysEEPROMPath ep;
+
+    const char *short_options = "hifpdmbsce";
+    const struct option long_options[] = {
+        {"help",        no_argument,          0,    'h'},
+        {"id",          no_argument,          0,    'i'},
+        {"platform",    no_argument,          0,    'f'},
+        {"project",     no_argument,          0,    'p'},
+        {"product",     no_argument,          0,    'd'},
+        {"model",       no_argument,          0,    'm'},
+        {"i2c-bus",     no_argument,          0,    'b'},
+        {"chan-select", no_argument,          0,    's'},
+        {"chan",        no_argument,          0,    'c'},
+        {"eeprom-slave",no_argument,          0,    'e'},
+        {0,                       0,          0,      0},
+    };
+
+    if (argc == 1) {
+        mb_detect_usage();
+        return 0;
+    }
+
+    while (TRUE) {
+        c = getopt_long(argc, argv, short_options,
+                        long_options, &option_index);
+        if (c == EOF)
+            break;
+
+        count++;
+        switch (c) {
+            case 'h':
+                mb_detect_usage();
+                break;
+
+            case 'i':
+                id = mb_id_get();
+                printf("%d\n", id);
+                break;
+
+            case 'f':
+                if(sys_board_info_get(&bdinfo) == 0) {
+                  printf("netberg_%s\n", bdinfo.projectName);
+                }
+                else {
+                  printf("No match motherboard detected.\n");
+                }
+                break;
+
+            case 'p':
+                if(sys_board_info_get(&bdinfo) == 0) {
+                  printf("%s\n", bdinfo.projectName);
+                }
+                else {
+                  printf("No match motherboard detected.\n");
+                }
+                break;
+
+            case 'd':
+                if(sys_board_info_get(&bdinfo) == 0) {
+                  printf("%s\n", bdinfo.productName);
+                }
+                else {
+                  printf("No match motherboard detected.\n");
+                }
+                break;
+
+            case 'm':
+                if(sys_board_info_get(&bdinfo) == 0) {
+                  printf("%s\n", bdinfo.modelName);
+                }
+                else {
+                  printf("No match motherboard detected.\n");
+                }
+                break;
+
+            case 'b':
+                printf("0x%02x\n", MB_DETECT_I2C_BUS);
+                break;
+
+            case 's':
+                if(sys_eeprom_path_get(&ep) == 0) {
+                  printf("0x%02x\n", ep.i2c_mux);
+                }
+                else {
+                  printf("No match motherboard detected.\n");
+                }
+                break;
+
+            case 'c':
+                if(sys_eeprom_path_get(&ep) == 0) {
+                  printf("0x%02x\n", (1<<ep.i2c_channel));
+                }
+                else {
+                  printf("No match motherboard detected.\n");
+                }
+                break;
+
+            case 'e':
+                if(sys_eeprom_path_get(&ep) == 0) {
+                  printf("0x%02x\n", ep.i2c_dev);
+                }
+                else {
+                  printf("No match motherboard detected.\n");
+                }
+                break;
+
+            default:
+                mb_detect_usage();
+                break;
+        }
+    }
+
+    return 0;
+}
+
+u8 mb_id_get(void) {
+    static u8 id = MAX_NUM_MB;
+    u8 data = 0;
+    int rc;
+
+    if(id != MAX_NUM_MB) {
+        return id;
+    }
+
+    rc = i2c_smbus_cpld_reg_read(I2C_SMBUS_CPLD_BUS, I2C_SMBUS_CPLD_ADDR, 0, &data);
+    if (rc == 0)
+        id = (data >> 4) & 0x0f;
+
+    if(id == 0x0e) {  /* Extended Board Type */
+        rc = i2c_smbus_cpld_reg_read(I2C_SMBUS_CPLD_BUS, I2C_SMBUS_CPLD_ADDR, 0x7, &data);
+        if (rc == 0)
+            id = ((id << 4) & 0xf0) | (data & 0x0f);
+
+    }
+
+    return id;
+}
+
+static u8 mb_build_rev_get(void) {
+    u8 build_rev = 0;
+    u8 data = 0;
+    int rc;
+
+    rc = i2c_smbus_cpld_reg_read(I2C_SMBUS_CPLD_BUS, I2C_SMBUS_CPLD_ADDR, 0, &data);
+    if (rc == 0)
+        build_rev = (data&0x03);
+    return build_rev;
+}
+
+static u8 mb_hw_rev_get(void) {
+    u8 hw_rev = 0;
+    u8 data = 0;
+    int rc;
+
+    rc = i2c_smbus_cpld_reg_read(I2C_SMBUS_CPLD_BUS, I2C_SMBUS_CPLD_ADDR, 0, &data);
+    if (rc == 0)
+        hw_rev = ((data >> 2)&0x03);
+    return hw_rev;
+}
+
+u8 mb_index_get(void) {
+    SysBoardInfo *bdinfo = sysBoardInfo;
+    u8 index;
+    u8 motherboard_id = mb_id_get();
+
+    for(index=0; index<MB_LAST; index++) {
+        if(motherboard_id == bdinfo->motherboard_id) {
+            break;
+        }
+        bdinfo++;
+    }
+
+    return index;
+}
+
+s32 sys_board_info_get(SysBoardInfo *bdinfo) {
+    u8 index = mb_index_get();
+
+    if(index < MB_LAST) {
+        memcpy(bdinfo, &sysBoardInfo[index], sizeof(SysBoardInfo));
+        return 0;
+    }
+
+    bdinfo = NULL;
+    return -1;
+}
+
+s32 sys_eeprom_path_get(SysEEPROMPath *ep) {
+    u8 index = mb_index_get();
+
+    if(index < MB_LAST) {
+        switch(index) {
+            default:
+            case MB_HURACAN_BMC:
+            case MB_HURACAN:
+            case MB_HURACAN_A_BMC:
+            case MB_HURACAN_A:
+                memcpy(ep, &sysEEPROMPath[0], sizeof(SysEEPROMPath));
+                break;
+
+            case MB_SESTO_BMC:
+            case MB_SESTO:
+            case MB_EVORA:
+            case MB_EUROPA:
+                memcpy(ep, &sysEEPROMPath[1], sizeof(SysEEPROMPath));
+                break;
+
+            case MB_NCIIX_BMC:
+            case MB_NCIIX:
+                {
+                  u8 build_rev = mb_build_rev_get();
+                  u8 hw_rev = mb_hw_rev_get();
+
+                  if ((build_rev == 0x01)&&(hw_rev == 0x03)) /* PVT */
+                      memcpy(ep, &sysEEPROMPath[3], sizeof(SysEEPROMPath));
+                  else
+                      memcpy(ep, &sysEEPROMPath[2], sizeof(SysEEPROMPath));
+                }
+                break;
+
+            case MB_ASTERION_BMC:
+            case MB_ASTERION:
+                memcpy(ep, &sysEEPROMPath[4], sizeof(SysEEPROMPath));
+                break;
+        }
+
+        return 0;
+    }
+
+    ep = NULL;
+    return -1;
+}
diff --git a/include/mb_detect.h b/include/mb_detect.h
new file mode 100644
index 0000000..9f0ef9c
--- /dev/null
+++ b/include/mb_detect.h
@@ -0,0 +1,73 @@
+#ifndef __MB_DETECT_H
+#define __MB_DETECT_H
+
+typedef __u8 u8;
+typedef __u32 u32;
+typedef __s32 s32;
+
+#define MB_DETECT_I2C_BUS 1
+
+#define I2C_SMBUS_CPLD_BUS 0
+#define I2C_SMBUS_CPLD_ADDR 0x33
+
+#define MAX_NUM_MB 0x3f
+enum {
+    MB_HURACAN_BMC = 0,
+    MB_HURACAN,
+    MB_CABRERAIII_BMC,
+    MB_CABRERAIII,
+    MB_SESTO_BMC,
+    MB_SESTO,
+    MB_NCIIX_BMC,
+    MB_NCIIX,
+    MB_ASTERION_BMC,
+    MB_ASTERION,
+    MB_HURACAN_A_BMC,
+    MB_HURACAN_A,
+    MB_EVORA,
+    MB_EUROPA,
+    MB_LAST
+};
+
+#define SYS_PRODUCT_NAME_SIZE           64  /* max. product name size */
+#define SYS_MODEL_NAME_SIZE             64  /* max. model name size */
+typedef struct {
+    u8 motherboard_id;
+    u8 projectName[SYS_PRODUCT_NAME_SIZE+1];
+    u8 productName[SYS_PRODUCT_NAME_SIZE+1];
+    u8 modelName[SYS_MODEL_NAME_SIZE+1];
+} SysBoardInfo;
+
+typedef struct {
+    u8 i2c_mux;
+    u8 i2c_channel;
+    u8 i2c_dev;
+    u8 i2c_bus[32];
+} SysEEPROMPath;
+
+extern u8 mb_id_get(void);
+extern u8 mb_index_get(void);
+extern s32 sys_eeprom_path_get(SysEEPROMPath *ep);
+extern s32 sys_board_info_get(SysBoardInfo *bdinfo);
+
+/* Model ID Definition */
+typedef enum
+{
+    HURACAN_WITH_BMC = 0x0,
+    HURACAN_WITHOUT_BMC,
+    CABRERAIII_WITH_BMC,
+    CABRERAIII_WITHOUT_BMC,
+    SESTO_WITH_BMC,
+    SESTO_WITHOUT_BMC,
+    NCIIX_WITH_BMC,
+    NCIIX_WITHOUT_BMC,
+    ASTERION_WITH_BMC,
+    ASTERION_WITHOUT_BMC,
+    HURACAN_A_WITH_BMC,
+    HURACAN_A_WITHOUT_BMC,
+    EVORA_WITHOUT_BMC = 0xE0,
+    EUROPA_WITHOUT_BMC = 0xE1,
+    MODEL_ID_LAST
+} modelId_t;
+
+#endif  /* __MB_DETECT_H */
