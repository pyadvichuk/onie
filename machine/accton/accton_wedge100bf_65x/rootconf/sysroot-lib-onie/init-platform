# This script fragment is sourced by /etc/init.d/init-arch.sh,
# which in turn executes the init_platform_pre_arch() and
# init_platform_post_arch() functions.

init_platform_post_arch()
{
	#
	# Wait for the EEPROM to come up.  Or more specifically,
	# wait for the cp2112 USB-to-I2C bridge to come up.
	# USB device initialization can happen asynchronously
	# and late.  We want the EEPROM to be available before
	# the rest of user-level initialization.
	#
	sleep 1.5
	i=100
	while true; do
		[ -w /sys/bus/i2c/devices/i2c-8/new_device -a -w /sys/bus/i2c/devices/i2c-16/new_device ] || {
			[ -w /sys/bus/i2c/devices/i2c-0/new_device -a -w /sys/bus/i2c/devices/i2c-1/new_device ] && {
				echo pca9548 0x74 > /sys/bus/i2c/devices/i2c-0/new_device
				sleep 0.1
				echo pca9548 0x74 > /sys/bus/i2c/devices/i2c-1/new_device
			}
		}
		[ -r /sys/bus/i2c/devices/8-0050/eeprom -a -r /sys/bus/i2c/devices/16-0050/eeprom ] || {
			[ -w /sys/bus/i2c/devices/i2c-8/new_device -a -w /sys/bus/i2c/devices/i2c-16/new_device ] && {
				echo 24c64 0x50 > /sys/bus/i2c/devices/i2c-8/new_device
				echo 24c64 0x50 > /sys/bus/i2c/devices/i2c-16/new_device
			}
		}
		if onie-syseeprom >/dev/null 2>&1; then
			echo "EEPROM device found."
			break
		fi
		if [ $i -le 0 ]; then
			echo "EEPROM device unavailable."
			break
		fi
		if [ $(($i % 10)) -eq 0 ]; then
			echo "Waiting for EEPROM device to become" \
			     "available... $(($i / 10))"
		fi
		sleep 0.1
		i=$(($i - 1))
	done
}
