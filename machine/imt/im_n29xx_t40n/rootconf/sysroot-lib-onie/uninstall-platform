# platform specific uninstall routine

# When deleting partitions this function determines whether or not to
# keep the specified msdos partition.
#
# arg $1 - block device without the "/dev"
# arg $2 - the partition number
#
# Returns 0 to delete the partition.
should_delete_msdos_partition()
{
    # check for ONIE-BOOT file system volume label
    blkid /dev/${1}$2 | \
    egrep -q 'LABEL=("'"${onie_boot_label}"'"|".*-DIAG") ' && return 1
    return 0
}

# Install GRUB initial grub.cfg file.
#
# Set a few GRUB_xxx environment variables that will be picked up and
# used by the 50_onie_grub script.  This is similiar to what an OS
# would specify in /etc/default/grub.
install_grub_config()
{
    local boot_dir="$1"

    SERIAL_CONSOLE_ENABLE="yes"

    if [ "$SERIAL_CONSOLE_ENABLE" = "yes" ] ; then
        DEFAULT_GRUB_SERIAL_COMMAND="serial --port=0x3f8 --speed=115200 --word=8 --parity=no --stop=1"
        DEFAULT_GRUB_CMDLINE_LINUX="console=tty0 console=ttyS0,115200n8"
        DEFAULT_GRUB_TERMINAL_INPUT="serial"
        DEFAULT_GRUB_TERMINAL_OUTPUT="serial"
    else
        DEFAULT_GRUB_SERIAL_COMMAND=""
        DEFAULT_GRUB_CMDLINE_LINUX=""
        DEFAULT_GRUB_TERMINAL_INPUT="console"
        DEFAULT_GRUB_TERMINAL_OUTPUT="console"
    fi
    GRUB_SERIAL_COMMAND=${GRUB_SERIAL_COMMAND:-"$DEFAULT_GRUB_SERIAL_COMMAND"}
    GRUB_TERMINAL_INPUT=${GRUB_TERMINAL_INPUT:-"$DEFAULT_GRUB_TERMINAL_INPUT"}
    GRUB_TERMINAL_OUTPUT=${GRUB_TERMINAL_OUTPUT:-"$DEFAULT_GRUB_TERMINAL_OUTPUT"}
    GRUB_CMDLINE_LINUX=${GRUB_CMDLINE_LINUX:-"$DEFAULT_GRUB_CMDLINE_LINUX"}
    export GRUB_SERIAL_COMMAND
    export GRUB_TERMINAL_INPUT
    export GRUB_TERMINAL_OUTPUT
    export GRUB_CMDLINE_LINUX

    $boot_dir/onie/grub.d/50_onie_grub >> $grub_root_dir/grub.cfg
}

# Get MSDOS partition type
#
# Return partition type: primary|extended|logical|unknown
get_msdos_part_type()
{
    local blk_dev=$1
    local part=$2
    parted /dev/${blk_dev} print | sed "s/^ //" | grep "^${part}" | awk '{split($0,a," "); print a[5]}' || echo "unknown"
}

# Erase a mass storage
#
# arg $1 - block device without the "/dev"
erase_mass_storage()
{
    local blk_dev=$1
    # check if we have an mmcblk device
    local blk_suffix=
    echo ${blk_dev} | grep -q mmcblk && blk_suffix="p"
    # check if we have an nvme device
    echo ${blk_dev} | grep -q nvme && blk_suffix="p"

    if ls -d /sys/block/$blk_dev/${blk_dev}* > /dev/null 2>&1 ; then
        # Wipe out and delete all partitions, except for important ones,
        # like GRUB, ONIE and possibly a DIAG.
        ls -d /sys/block/$blk_dev/${blk_dev}* | sed -e "s/^.*$blk_dev$blk_suffix//" | while read part ; do
            if eval $should_delete_partition $blk_dev $part ; then
                # MSDOS extended partitions should be removed after logical
                # without data errasing
                if [ "$onie_partition_type" = "msdos" ] && [ "$(get_msdos_part_type $blk_dev $part)" = "logical" ]; then
                    erase_block_device ${blk_dev}${blk_suffix}${part}
                elif [ "$onie_partition_type" != "msdos" ] || [ "$(get_msdos_part_type $blk_dev $part)" != "extended" ]; then
                    erase_part $blk_dev $part
                fi
            fi
        done

        ls -d /sys/block/$blk_dev/${blk_dev}* | sed -e "s/^.*$blk_dev$blk_suffix//" | while read part ; do
            if eval $should_delete_partition $blk_dev $part && [ "$(get_msdos_part_type $blk_dev $part)" = "extended" ]; then
                eval $delete_partition $blk_dev $part || {
                    printf "${log_pre}Unable to remove partition $part on /dev/$blk_dev\n"
                    return 1
                }
            fi
        done
    else
        # Wipe out the whole block device
        erase_block_device $blk_dev
    fi
}

[ -r "$lib_dir/onie-blkdev-common" ] || {
    echo "ERROR: Unable to find onie-blkdev-common"
    exit 1
}
. $lib_dir/onie-blkdev-common

install_grub_config $onie_boot_mnt
rm -f $onie_boot_mnt/* 2>/dev/null
