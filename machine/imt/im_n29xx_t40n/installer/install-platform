# platform-specific installer

pre_install()
{
    echo "IM platform installer"
}

post_install()
{
    echo "Updating IM platform"
    mountdir=$(mktemp -d /tmp/partXXXXXX)
    boot_uuid=$(blkid | grep -F 'LABEL="'"${onie_boot_label}"'"' | \
            tr ' ' '\n'| grep UUID | cut -d\" -f2)
    for part in $(seq 1 8)
        do
            mount | grep -qE "^${onie_dev}${part}"
            if [ "$?" != "0" ]
                then
                    if mount "${onie_dev}${part}" "${mountdir}" 2>/dev/null
                        then
                            mount none -t tmpfs "${mountdir}/dev" && \
                            cp -a /dev/* "${mountdir}/dev/" && \
                            mount --bind "${common_boot_mnt}" "${mountdir}/boot" && \
                            mount --bind /proc "${mountdir}/proc" && \
                            mount --bind /sys "${mountdir}/sys" && \
                            if [ -f "${mountdir}/etc/fstab" ]; then
                                os_boot_uuid=$(tr '\t' ' ' < "${mountdir}/etc/fstab" | \
                                grep -E '^UUID=.* +/boot +' | \
                                sed -e 's/^UUID=//' -e 's/ .*$//g')
                                if [ -n "$os_boot_uuid" ]; then
                                    blkid | grep -qF 'UUID="'"${os_boot_uuid}"'"' || \
                                    ((grep -vE '^UUID=.*/boot' "${mountdir}/etc/fstab"
                                    echo -e "UUID=${boot_uuid}\t/boot\text2\tdefaults,noatime\t0\t1") \
                                    > /tmp/fstab  && \
                                    cat /tmp/fstab  > "${mountdir}/etc/fstab"
                                    rm /tmp/fstab
                                    chroot "${mountdir}" grub-install "${onie_dev}" &&
                                    chroot "${mountdir}" update-grub
                                    )
                                fi
                            fi
                            umount "${mountdir}/sys" > /dev/null 2>&1
                            umount "${mountdir}/proc" > /dev/null 2>&1
                            umount "${mountdir}/boot" > /dev/null 2>&1
                            umount "${mountdir}/dev" > /dev/null 2>&1
                            umount "${mountdir}" > /dev/null 2>&1
                    fi
            fi
            done
            rmdir "${mountdir}"
}

#pre_install_hook=pre_install
post_install_hook=post_install

# This function is copied from install-arch, and modified to preserve
# files in the boot directory and perform GRUB update unconditionally.

# This function is run by install.sh *after* the onie-update.tar file
# is extracted.
install_onie()
{
    init_onie_install

    echo "Installing ONIE on: $onie_dev"

    if [ -n "$pre_install_hook" ]; then
        eval $pre_install_hook || {
            echo "Error: pre-install failed"
            exit 1
        }
    fi

    if [ "$onie_boot_reason" = "embed" ] ; then
        # umount any partitions that might be mounted on this disk
        for p in $(seq 8) ; do
            umount ${onie_dev}$blk_suffix$p > /dev/null 2>&1
        done
        # Initialize block device
        eval $init_disk
    else
        # umount ONIE-BOOT if mounted
        umount $(onie_get_boot_dev) > /dev/null 2>&1
        eval $verify_partitions || {
            echo "ERROR: Partitions on target device do not look right: $onie_dev"
            echo "ERROR: Recommend re-embedding ONIE instead of updating."
            exit 1
        }
    fi

    mkdir -p $onie_boot_mnt

    onie_boot_dev="${onie_dev}$blk_suffix$onie_boot_part"

    # Preserve a few precious files if they exist
    if mount -o defaults,rw -t $onie_boot_fs_type $onie_boot_dev $onie_boot_mnt > /dev/null 2>&1 ; then
        if [ -r $grub_env_file ] ; then
            preserve_grubenv=yes
            cp $grub_env_file /tmp/grubenv
        fi
        if [ -d $onie_update_dir ] ; then
            preserve_update_dir=yes
            mkdir $onie_update_dir/bootfiles
            cp $onie_boot_mnt/* $onie_update_dir/bootfiles 2>/dev/null
            rm -rf /tmp/preserve-update
            cp -a $onie_update_dir /tmp/preserve-update
        fi
        umount $onie_boot_mnt > /dev/null 2>&1
    fi

    # Create file system on ONIE-BOOT partition
    [ "$verbose" = "yes" ] && echo "Creating $onie_boot_fs_type file system on: $onie_boot_dev"
    mkfs.$onie_boot_fs_type -q -L $onie_boot_label $onie_boot_dev || {
        echo "Error: Unable to create $onie_boot_fs_type file system on: $onie_boot_dev"
        exit 1
    }

    mount -o defaults,rw -t $onie_boot_fs_type $onie_boot_dev $onie_boot_mnt || {
        echo "Error: Unable to mount $onie_boot_label ($onie_boot_dev) on ${onie_boot_mnt}"
        exit 1
    }

    # Create basic directories for installing and logging
    mkdir -p $onie_root_dir $onie_update_dir $onie_update_results_dir

    # Put the ONIE kernel and initramfs into place.
    kernel_name="vmlinuz-${image_kernel_version}-onie"
    initrd_name="initrd.img-${image_kernel_version}-onie"
    cp onie.vmlinuz $onie_root_dir/$kernel_name || {
        echo "Error: Unable to copy ONIE kernel to $onie_root_dir/$kernel_name"
        exit 1
    }
    cp onie.initrd $onie_root_dir/$initrd_name || {
        echo "Error: Unable to copy ONIE initrd to $onie_root_dir/$initrd_name"
        exit 1
    }
    # install ONIE tools
    rm -rf $onie_root_dir/tools && mkdir -p $onie_root_dir/tools
    tar -C $onie_root_dir/tools -xf onie-tools.tar.xz || {
        echo "Error: Unable to copy ONIE tools to $onie_root_dir/tools"
        exit 1
    }

    if [ "$install_firmware" = "uefi" ] ; then
        install_uefi_grub $uefi_esp_mnt $onie_dev $onie_boot_mnt || {
            echo "Error: Problems installing UEFI GRUB on device: $uefi_esp_mnt, $onie_dev, $onie_boot_mnt"
            exit 1
        }
    else
        #if [ "$onie_boot_reason" = "embed" ] ; then
            # When embedding ONIE install ONIE's grub into the MBR block
            # device, e.g. /dev/sda.
            install_grub mbr $onie_dev $onie_boot_mnt || {
                echo "Error: Problems installing GRUB on device: $onie_dev, $onie_boot_mnt"
                exit 1
            }
        #fi

        # Also install GRUB on the ONIE partition block device,
        # e.g. /dev/sda1.
        install_grub part $onie_boot_dev $onie_boot_mnt || {
            echo "Error: Problems installing GRUB on device: ${onie_boot_dev}, $onie_boot_mnt"
            exit 1
        }
    fi

    # Restore the previous grubenv file
    if [ "$preserve_grubenv" = "yes" ] ; then
        cp /tmp/grubenv $grub_env_file
    fi

    # Restore the previous update directory
    if [ "$preserve_update_dir" = "yes" ] ; then
        rm -rf $onie_update_dir
        cp -a /tmp/preserve-update $onie_update_dir
        if [ -d $onie_update_dir/bootfiles ] ; then
            mv $onie_update_dir/bootfiles/* $onie_boot_mnt 2>/dev/null
            rmdir $onie_update_dir/bootfiles
        fi
    fi

    # Return to default boot mode on the next boot.  Use this
    # installer's version of onie-boot-mode.
    $onie_root_dir/tools/bin/onie-boot-mode -q -o none

    if [ -n "$post_install_hook" ]; then
        eval $post_install_hook || {
            echo "Error: post-install failed"
            exit 1
        }
    fi

    # Set platform name and ONIE version to sys_eeprom.
    if [ -x /usr/bin/onie-syseeprom ] ; then
        onie-syseeprom -s 0x28="$image_platform",0x29="$image_version" > /dev/null
    fi
}

# Local Variables:
# mode: shell-script
# eval: (sh-set-shell "/bin/sh" t nil)
# End:
